@page "/students" 
@inject IStudentService StudentService
@inject NavigationManager NavigationManager
@implements IDisposable


<h3>Boun Students</h3>

@if (StudentService.Students.Count == 0)
{
    <span>Loading students...</span>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Status</th>
            <th>Record</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var stu in StudentService.Students)
        { 
        <tr>
            <td>@stu.FirstName</td>
            <td>@stu.LastName</td>
            <td>@stu.Status</td>
            <td>@stu.Record.Name</td>
            <td>
                <button class="btn btn-dark" @onclick="(() => ShowStudent(stu.Id))">Show</button>
            </td>
            <td>
                <button class="btn btn-dark" @onclick="(() => EditStudent(stu.Id))">Edit</button>
            </td>
            <td>
                <button class="btn btn-dark" @onclick="(() => DeleteStudent(stu.Id))">Delete</button>
            </td>
        </tr>
        }
    </tbody>
</table>
}

<EditStudent Stu="studentToEdit"></EditStudent>

@code {   
    //List<FinalWeb.Shared.Student> students = new List<FinalWeb.Shared.Student>();
    FinalWeb.Shared.Student studentToEdit = new FinalWeb.Shared.Student();

    protected override async Task OnInitializedAsync()
    {

        await StudentService.GetStudents();
        StudentService.OnChange += StateHasChanged;

    }

    void ShowStudent(int id)
    {
        NavigationManager.NavigateTo($"student/{id}");
    }

    void EditStudent(int id)
    {
        studentToEdit = StudentService.Students.Find(h => h.Id == id);
    }

    void DeleteStudent(int id)
    {
        StudentService.DeleteStudent(id);
    }

    public void Dispose()
    {
        StudentService.OnChange -= StateHasChanged;
    }

}
